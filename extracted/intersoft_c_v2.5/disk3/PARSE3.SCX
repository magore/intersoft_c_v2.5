/*
 * Intersoft C compiler Version 2.5
 * Copyright (c) 1982 by Intersoft
 */

#include "consts/scx"
#include "vars/scx"


/* This module contains the code to parse primary
 * expressions such as constants, parenthesized expressions
 * and simple variable references.
 */


/*
 * Parse primary expressions such as :
 *      ( expression )
 *      NAME
 *      constant
 */
primary(lval)
  int  *lval;
{
  char *ptr, sname[NAMESIZE];
  int  num[1], k, oldcomma;

  lval[2] = 0;          /* Clear pointer/array type. */
  if (match("(")) {
    oldcomma = comma;
    comma = 1;          /* Enable the comma operator. */
    k = heir1(lval);
    needbrack(")");
    comma = oldcomma;
    return k;
  }
  if (symname(sname)) {
    if (ptr = findloc(sname)) {
      *lval = ptr;
      lval[1] = 0;
      if (ptr[IDENT] != ARRAY) {
        if (ptr[IDENT] == POINTER)
          lval[2] = ptr[TYPE];
        return 1;
      }
      return 0;
    }
    if ((ptr = findglb(sname)) && (ptr[IDENT] != FUNCTION)) {
      *lval = ptr;
      lval[1] = 0;
      if (ptr[IDENT] != ARRAY) {
        if (ptr[IDENT] == POINTER)
          lval[2] = ptr[TYPE];
        return 1;
      }
      return 0;
    }
    if (!ptr)
      ptr = addglb(sname, FUNCTION, CINT, 0);
    *lval = ptr;
    lval[1] = 0;
    return 0;
  }
  if (constant(lval))
    return 0;
  else {
    scerror("Invalid expression, evaluated as FALSE");
    immed();
    outhex(0);
    nl();
    junk();
    return 0;
  }
}


/*
 * class "const" - routines to parse & convert constants to 
 *     internal form for the small-c compiler. 
 *    If error determined unequivically, will take
 *     requisite action, usually of terminating parse early,
 *     and report error from highest applicable routine.
 *    Otherwise will return only a 0 and let next
 *      level up diagnose problem with the knowlege that
 *      constant didn't recognize it
 *
 *     const:
 *        qstr:  quoted string constant parser
 *        pstr:  character-constant parser
 *        number:
 *      decimal: decimal parser (old "number")
 *      octal: octal parser
 *      hexidecimal: hex (sexidecimal) parser
 */


/* Parse a numeric, character or string constant */
constant(lval) 
  int  *lval;
{
  int val[1];

  if (qstr(val)) {
    immed();
    printlabel(litlab);
    outbyte('+');
    outhex(*val);
    nl();
    *lval = 0;
    lval[1] = lval[2] = CCHAR;
  } else
    if (pstr(val) || number(val))
    {
      lval[1] = CCONST;
      lval[2] = *val;
      *lval = 0;
    }
    else /* none of the above */
        return 0;
  return 1;
}


/* Parse character constants */
pstr(val)
  int  *val;
{
  char carray[1];

  if (!match("'"))
    return 0;
  if (ch() == escchar)
    escape(carray);
  else
    *carray = gch();
  if (ch() != APOST)
    scerror("Missing apostrophe in character constant inserted");
  else
    adv1();
  *val = *carray & 0xFF;
  return 1;
}

     
/* Parse a quoted string constant */
qstr(val)
  int  *val;
{
  char carray[1], lc;

  if (!match(quote))
    return 0;
  *val = litptr;
  while (ch() != DQUOTE) {
    if (litptr > LITMAX) {
      scerror("Literal pool overflow");
      lc = DQUOTE;
      while (((ch() != DQUOTE) || (lc == escchar)) && !eof) {
        if (!ch()) {
          inline();
          preprocess();
        } else
          lc = gch();
      }
      gch();
      return 1;
    }

    /* Process a single escaped or unescaped character */
    if (ch() == escchar) {
      if (nch() == DQUOTE) { /* Handle escaped quotes. */
        addlit(DQUOTE);
        adv(2);
      } else {
        if (!nch()) {  /* Escaped end-of-lines are ignored. */
          inline();
          preprocess();
        } else { /* Handle an escape character */
          escape(carray);
          addlit(*carray);
        }
      }
    } else
      addlit(CMASK & gch());  /* Stash unescaped characters. */
  }
  gch();
  if (litptr > LITMAX) {
    scerror("Literal pool overflow");
    return 1;
  } else
    addlit(0);  /* Terminate string */
  return 1;
}


/* Parse a character escape-sequence */
escape(val)
  char *val;
{
  char c;

  if (gch() != escchar)
    return FALSE;
  if (scisdigit(ch())) {
    *val = octesc();
    return TRUE;
  } else
    switch(sctoupper(ch())) {
      case 'N': c = 30;
                break;
      case 'T': c = 9;
                break;
      case 'F': c = FORMFEED;
                break;
      case 'B': c = 8;
                break;
      case 'R': c = 13;
                break;
      case APOST: c = APOST;     /* ' */
                break;
      default: c = ch();
               break;
    }
  *val = c;
  adv1();
  return TRUE;
}


/* Get an octal escape sequence */
octesc()
{
  int  i, val;

  /* Get 1 to 3 octal digits */
  val = 0;
  for (i = 0; (i < 3) && isoctal(ch()); val = val * 8 +
                                              gch() - '0');

  /* Determine the return value */
  if (val > 0377) {
    scerror("Value too large, 0377 used");
    return 0377;
  }
  return val;
}


/* Identify and convert a decimal, octal or hex constant */
number(val)
  int  *val;
{
  if (ch() == '0') {
    adv1();             /* skip 0 */
    if (sctoupper(ch()) == 'X') {
      adv1();           /* skip X */
      hexidecimal(val);
    } else
      if (scisdigit(ch()))
        octal(val);
      else              /* was a single '0' */
        *val = 0;
  } else
    if (scisdigit(ch()))
      decimal(val);
    else               /* not a numeric constant */
      return 0;
  return 1;
}


/* Convert a hexidecimal constant */
hexidecimal(val)
  int  *val;
{
  int  k;
  char c;

  k = 0;
  while (isalnum(ch())) {
    c = inbyte();
    if (scisalpha(c)) {
      if ((c = sctoupper(c)) > 'F') {
        scerror("Hex digit > F forced to F");
        c = 'F';
      }
      c -= '7';  /* '7' = 'A' - 10 */
    }
    else /* numeric */
      c -= '0';
    k = (k << 4) + c;
  }
  *val = k;
  return;
}


/* Convert an octal constant */
octal(val)
  int  *val;
{
  int  k;
  char c;

  k = 0;
  while (scisdigit(ch())) {
    c = inbyte();
    if (c > '7') {
      scerror("Octal digit > 7 forced to 7");
      c = '7';
    }
    k = (k << 3) + (c - '0');
  }
  *val = k;
  return;
}


/* convert an (optionally signed) decimal constant */
decimal(val)
  int  *val;
{
  int  j, k, minus;
  char c;

  j = minus = 1;
  while (j) { /* determine sign */
    j = 0;
    if (match("+"))
      j = 1;
    else
      if (match("-")) {
        minus = -minus;
        j = 1;
      }
  }
  if (!scisdigit(ch())) {
    /* found space after sign */
    scerror("in decimal: no digit after sign, 0 returned");
    /* assume there never were digits: hope its true */
    *val = 0;
    return;
  }
  k = 0;
  while (scisdigit(ch())) {
    c = inbyte();
    k = (k * 10) + (c - '0');
  }
  if (minus <= 0)
    k = -k;
  *val = k;
}
